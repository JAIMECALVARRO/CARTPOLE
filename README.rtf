{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\ri-6\partightenfactor0

\f0\b\fs36 \cf0 Minimal README:
\f1\b0\fs24 \
\

\f0\b Installation:
\f1\b0 \
\
Create conda environment with \
conda create -n pt-cartpole python=3.8 matplotlib pyqt pandas tqdm scipy ipython memory_profiler\
\
Choose right installation command for Pytorch\
https://pytorch.org/get-started/locally/\
(Sensitive to whether you have CUDA (GPU) in your computer or not)\
\
\

\f0\b Running the project files:
\f1\b0 \
\
You may run 3 different files: main.py, Train.py and Test.py\
\
\
\
Run main.py to start the GUI of CartPole.\
\
Run Train.py to train RNN and Test.py to test it. The data is for both produced on the fly from the CartPole model.\
\
In the \'93Manual Stabilization\'94 mode you can provide the control input (motor power related to the force acting on the cart) by hovering with your mouse over the lower chart. Due to some bug (or maybe rather specific Cart-Pole system parameters) everything happens to fast to make it doable now.\
\
In the \'93LQR-Stabilization\'94 mode an automatic (LQR) controller takes care that the Pole stays in the upright position. You can provide the target position of the cart by hovering with your mouse over the lower chart.\
\
Click start button to start the game and stop to stop it.\
Quit button is provided because when launch from some IDEs (e.g. Spyder on Windows 10) the standard cross in the window corner may not work correctly.\
Generate Trace if clicked in \'93LQR-Stabilization\'94 mode generates a random target position over time trace and runs a CartPole experiment with LQR controller.\
\
Switch off \'93Real time simulation\'94 checkbox to make the simulation run faster.\
\
All the experiment recording are saved as .csv data files in the \'93save\'94 folder.\\\
\
\
\
Run Train.py to train an RNN to predict future states of a CartPole\
\
Run Test.py to evaluate an RNN predicting future states of a random CartPole experiments\
\
Both Train.py and Test.py generate data from data generated on the fly from random CartPole experiments. You do not have to provide preprepared data.\
\
\

\f0\b Next step TODO:
\f1\b0 \
	Summary window (summary function already ready)\
}