#library: 'TF'  # TF or Pytorch
library: 'Pytorch'  # TF or Pytorch
modeling:
  NET_NAME: 'Dense-16H1-16H2'
#  NET_NAME: 'GRU-7IN-32H1-32H2-1OUT-1'
paths:
  PATH_TO_EXPERIMENT_FOLDERS:     './SI_Toolkit_ASF/Experiments/'     # Path where the experiments are stored
  path_to_experiment:             'CPS-17-02-2023-UpDown-Imitation'   # Path relative to PATH_TO_EXPERIMENT_FOLDERS to the particular experiment folder
  DATA_FOLDER:                    'Recordings'                        # Folder within path_to_experiment where the experimental data is stored

training_default:
  # For training closed loop dynamics model:
#  control_inputs: ['Q']
#  state_inputs: ['angle_sin', 'angle_cos', 'angleD', 'position', 'positionD']
  setpoint_inputs: []  # Can be only 'target_position' or empty for CartPole
#  outputs: ['angle_sin', 'angle_cos', 'angleD', 'position', 'positionD']
  #  outputs: ['D_angle_sin', 'D_angle_cos', 'D_angleD', 'D_position', 'D_positionD'] # Don't forget to change SHIFT_LABELS to 0
  translation_invariant_variables: []
  # For training open loop dynamics model:
  # inputs = ['position', 'positionD', 'angle_sin', 'angle_cos', 'angleD']
  # outputs = inputs_list
  # For training of a network imitating MPC:
  control_inputs: []
  state_inputs: ['position', 'positionD', 'angle_cos', 'angle_sin', 'angleD', 'target_equilibrium', 'target_position']
  outputs:  ['Q']
  EPOCHS: 10
  BATCH_SIZE: 16
  SEED: 1873
  LR:
    INITIAL: 1.0e-2
    MINIMAL: 1.0e-5
    PATIENCE: 1
    DECREASE_FACTOR: 0.316 # sqrt(0.1)
  WASH_OUT_LEN: 10
  POST_WASH_OUT_LEN: 20
  ON_FLY_DATA_GENERATION: False
  NORMALIZE: True
  SHIFT_LABELS: 0  # for k, as a label to row i is taken row i+k
  USE_NNI: False  # Decide if you want to use NNI package
  CONSTRUCT_NETWORK: 'with cells'  # Matters only for Pytorch; 'with cells' or 'with modules'
  VALIDATE_ALSO_ON_TRAINING_SET: true